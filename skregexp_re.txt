SkRegExp Regular Expressions Version 1.1.15    

1. Modifiers

  m    Treat string as multiple lines. That is, change "^" and "$" 
       from matching the start or end of the string to matching 
       the start or end of any line anywhere within the string.
       
  s    Treat string as single line. That is, change "." to match 
       any character whatsoever, even a newline, which normally 
       it would not match.
  
  i    Do case-insensitive pattern matching.
  
  x    Extend your pattern's legibility by permitting whitespace 
       and comments.
       
2. Metacharacters

  \    Quote the next metacharacter
  ^    Match the beginning of the line
  .    Match any character (except newline)
  $    Match the end of the line (or before newline at the end)
  |    Alternation
  ()   Grouping
  []   Character class

3.Quantifiers

  greedy
  
    *	   Match 0 or more times
    +	   Match 1 or more times
    ?	   Match 1 or 0 times
    {n}    Match exactly n times
    {n,}   Match at least n times
    {n,m}  Match at least n but not more than m times
    
  reluctant

    *?     Match 0 or more times, not greedily
    +?     Match 1 or more times, not greedily
    ??     Match 0 or 1 time, not greedily
    {n}?   Match exactly n times, not greedily
    {n,}?  Match at least n times, not greedily
    {n,m}? Match at least n but not more than m times, not greedily

  possessive 

    *+     Match 0 or more times and give nothing back
    ++     Match 1 or more times and give nothing back
    ?+     Match 0 or 1 time and give nothing back
    {n}+   Match exactly n times and give nothing back (redundant)
    {n,}+  Match at least n times and give nothing back
    {n,m}+ Match at least n but not more than m times and give nothing back
    
3. Characters

  \t        tab                   (HT, TAB)
  \n        newline               (LF, NL)
  \r        return                (CR)
  \f        form feed             (FF)
  \a        alarm (bell)          (BEL)
  \b        backspace
  \e        escape (think troff)  (ESC)
  \033      octal char            (example: ESC)
  \x1B      hex char              (example: ESC)
  \x{263a}  wide hex char         (example: Unicode SMILEY)
  \cK       control char          (example: VT)
  \Q..\E    quote (disable) pattern metacharacters till \E

 (* \b is effective in character class [...] only)

4. Character Classes and other Special Escapes

  \w        Match a "word" character (alphanumeric plus "_")
  \W        Match a non-"word" character
  \s        Match a whitespace character
  \S        Match a non-whitespace character
  \d        Match a digit character
  \D        Match a non-digit character
  \pP       Match P, named property.  Use \p{Prop} for longer names.
  \PP       Match non-P
  \X        Match eXtended Unicode "combining character sequence",
            equivalent to (?:\PM\pM*)
  \C        Match a single C char (octet) even under Unicode.
            NOTE: breaks up characters into their UTF-8 bytes,
            so you may end up with malformed pieces of UTF-8.
            Unsupported in lookbehind.
  \1        Backreference to a specific group.
            '1' may actually be any positive integer.
  \g1       Backreference to a specific or previous group,
  \g{-1}    number may be negative indicating a previous buffer and may
            optionally be wrapped in curly brackets for safer parsing.
  \g{name}  Named backreference
  \k<name>  Named backreference
  \x12      Hexadecimal escape sequence
  \x{1234}  Long hexadecimal escape sequence
  \K        Keep the stuff left of the \K, don't include it in $&
  \v        Vertical whitespace
  \V        Not vertical whitespace
  \h        Horizontal whitespace
  \H        Not horizontal whitespace
  \R        Linebreak

  The POSIX character class syntax

    [:class:]
    
    [[:...:]]	\p{...}		backslash

    alpha       IsAlpha
    alnum       IsAlnum
    ascii       IsASCII
    blank
    cntrl       IsCntrl
    digit       IsDigit        \d
    graph       IsGraph
    lower       IsLower
    print       IsPrint
    punct       IsPunct
    space       IsSpace
                IsSpacePerl    \s
    upper       IsUpper
    word        IsWord
    xdigit      IsXDigit
